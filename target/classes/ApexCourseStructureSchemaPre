CREATE KEYSPACE coursestructure WITH replication = {
  'class': 'NetworkTopologyStrategy',
  'us-east': '3'
};

USE coursestructure;

CREATE TABLE courselock (
  cid text,
  lmd timestamp,
  lock boolean,
  PRIMARY KEY (cid)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE TABLE nonstudentbyitem (
  cid text,
  id uuid,
  dsc text,
  href text,
  lmd timestamp,
  lock boolean,
  lvl int,
  rpid uuid,
  so int,
  tn text,
  ttl text,
  PRIMARY KEY (cid, id)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE INDEX nonstudentbyitem_level ON nonstudentbyitem (lvl);

CREATE INDEX nonstudentbyitem_rootparentid ON nonstudentbyitem (rpid);

CREATE INDEX nonstudentbyitem_order ON nonstudentbyitem (so);

CREATE TABLE nonstudentitems (
  cid text,
  so int,
  id uuid,
  href text,
  lmd timestamp,
  lock boolean,
  lvl int,
  rpid uuid,
  tn text,
  ttl text,
  PRIMARY KEY (cid, so, id)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE INDEX nonstudentitems_order ON nonstudentitems (so);

CREATE INDEX nonstudentitems_level ON nonstudentitems (lvl);

CREATE INDEX nonstudentitems_rootparentid ON nonstudentitems (rpid);

CREATE TABLE studentbyitem (
  cid text,
  id uuid,
  dsc text,
  href text,
  lmd timestamp,
  lvl int,
  rpid uuid,
  so int,
  tn text,
  ttl text,
  PRIMARY KEY (cid, id)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE INDEX studentbyitem_level ON studentbyitem (lvl);

CREATE INDEX studentbyitem_rootparentid ON studentbyitem (rpid);

CREATE INDEX studentbyitem_order ON studentbyitem (so);

CREATE TABLE studentitems (
  cid text,
  so int,
  id uuid,
  href text,
  lmd timestamp,
  lvl int,
  rpid uuid,
  tn text,
  ttl text,
  PRIMARY KEY (cid, so, id)
) WITH
  bloom_filter_fp_chance=0.010000 AND
  caching='KEYS_ONLY' AND
  comment='' AND
  dclocal_read_repair_chance=0.000000 AND
  gc_grace_seconds=864000 AND
  index_interval=128 AND
  read_repair_chance=0.100000 AND
  replicate_on_write='true' AND
  populate_io_cache_on_flush='false' AND
  default_time_to_live=0 AND
  speculative_retry='99.0PERCENTILE' AND
  memtable_flush_period_in_ms=0 AND
  compaction={'class': 'SizeTieredCompactionStrategy'} AND
  compression={'sstable_compression': 'LZ4Compressor'};

CREATE INDEX studentitems_order ON studentitems (so);

CREATE INDEX studentitems_level ON studentitems (lvl);

CREATE INDEX studentitems_rootparentid ON studentitems (rpid);